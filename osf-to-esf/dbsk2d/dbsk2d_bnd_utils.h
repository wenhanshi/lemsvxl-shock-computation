// This is dbsk2d/dbsk2d_bnd_utils.h
#ifndef dbsk2d_bnd_utils_h
#define dbsk2d_bnd_utils_h

//:
// \file
// \brief This file contains utilities for topology boundary objects (dbsk2d_bnd_xxx)
// \author Nhon Trinh ( ntrinh@lems.brown.edu)
// \date 08/09/2005
//
// \verbatim
//  Modifications
//    Nhon Trinh   08/09/2005     Initial version
// \endverbatim


#include <vgl/vgl_point_2d.h>
#include "dbsk2d_bnd_vertex_sptr.h"
#include "dbsk2d_bnd_edge_sptr.h"
#include "dbsk2d_bnd_contour_sptr.h"
#include "dbsk2d_bnd_contour.h"
#include "dbsk2d_boundary_sptr.h"

//: Boundary contour for shock
class dbsk2d_bnd_utils
{
public:
  //: Destructor
  ~dbsk2d_bnd_utils(){};


  // ================ BND_VERTICES =================================
  //: Create a vertex at coordinate of `pt'
  // Id's of new vertex and the bpoint inside are obtained from boundary, if given.
  // Return smart pointer to the new vertex
  static dbsk2d_bnd_vertex_sptr new_vertex(const vgl_point_2d<double >& pt,
    const dbsk2d_boundary_sptr& boundary = 0);


  // ================ BND_EDGES =================================
  //: Create a singular point (degenerate edge)
  // Return a smart pointer to the new degenerate edge
  static dbsk2d_bnd_edge_sptr new_stand_alone_point(
    const vgl_point_2d<double >& pt,
    const dbsk2d_boundary_sptr& boundary = 0);

  //: Connect two vertices with a line edge
  // id's of new elements will be generated by `boundary', if given.
  // otherwise default id (-1) is used.
  // Return a pointer to the new edge
  static dbsk2d_bnd_edge_sptr new_line_between(const dbsk2d_bnd_vertex_sptr& start,
    const dbsk2d_bnd_vertex_sptr& end, 
    const dbsk2d_boundary_sptr& boundary=0);


  //: Connect two vertices with an arc edge
  // id's of new elements will be generated by `boundary', if given.
  // otherwise default id (-1) is used.
  // Return a pointer to the new edge
  static dbsk2d_bnd_edge_sptr new_arc_between(const dbsk2d_bnd_vertex_sptr& v1,
    const dbsk2d_bnd_vertex_sptr& v2, double curvature, 
    const dbsk2d_boundary_sptr& boundary=0);



  // ================== BND_CONTOUR ======================================

  //: Connect the points with line segments
  static dbsk2d_bnd_contour_sptr new_polyline_contour(
    const vcl_vector<vgl_point_2d<double > > &vertices, bool closed,
    const dbsk2d_boundary_sptr& boundary=0);
  


  //: Determine directions of the `edges' (such that they are connected)
  // Return false if the edges are not connected in a chain
  static bool determine_edge_directions(const vcl_vector<dbsk2d_bnd_edge_sptr >& edges,
                             vcl_vector<signed char >& directions);



  // ============= COLLECTING ELEMENTS FROM A LIST ==========
  //: Extract edge list from a list of contours
  static void extract_edge_list(const vcl_list<dbsk2d_bnd_contour_sptr >& contours, 
    vcl_list<dbsk2d_bnd_edge_sptr >& edges);

  //: Extract edge list from a boundary
  static void extract_edge_list(const dbsk2d_boundary_sptr& boundary,
    vcl_list<dbsk2d_bnd_edge_sptr >& edges);

  //: Extract edges that have `vertices' as their endpoints
  static void extract_edge_list(const vcl_list<dbsk2d_bnd_vertex_sptr >& vertices,
    vcl_list<dbsk2d_bnd_edge_sptr >& edges);


  //: Extract edge list from a list of contours
  static void extract_vertex_list(const vcl_list<dbsk2d_bnd_edge_sptr >& edges, 
    vcl_list<dbsk2d_bnd_vertex_sptr >& vertices);

  //: Extract list of belms from a list of edges
  static void extract_belm_list(const vcl_list<dbsk2d_bnd_edge_sptr >& edges, 
    vcl_vector<dbsk2d_ishock_belm* >& ret_belms);







  //// ========== REPLACING EDGES ===============
  

  // Potentially useful function
  ////: Construct a new polyline contour from a list of vertices
  //// Return smart pointer to the new contour
  //static dbsk2d_bnd_contour_sptr new_polyline_contour(
  //  const vcl_vector<dbsk2d_bnd_vertex_sptr >& vertices,
  //  const dbsk2d_boundary_sptr boundary );
  

private:
  //: Constructor - 
  dbsk2d_bnd_utils(){};


  
};

#endif // dbsk2d_bnd_utils_h
